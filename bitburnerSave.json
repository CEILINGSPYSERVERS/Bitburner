{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking\":45,\"hp\":13,\"max_hp\":13,\"strength\":36,\"defense\":36,\"dexterity\":38,\"agility\":38,\"charisma\":53,\"intelligence\":0,\"hacking_chance_mult\":1.030301,\"hacking_speed_mult\":1.06121003,\"hacking_money_mult\":1.030301,\"hacking_grow_mult\":1.030301,\"hacking_exp\":1515.2594378699916,\"strength_exp\":1055.2808538051233,\"defense_exp\":1055.2808538051233,\"dexterity_exp\":1055.2808538051233,\"agility_exp\":1055.2808538051233,\"charisma_exp\":2110.5617076102467,\"intelligence_exp\":0,\"hacking_mult\":1.030301,\"strength_mult\":1.030301,\"defense_mult\":1.030301,\"dexterity_mult\":1.08181605,\"agility_mult\":1.08181605,\"charisma_mult\":1.030301,\"hacking_exp_mult\":1.1333311,\"strength_exp_mult\":1.1333311,\"defense_exp_mult\":1.1333311,\"dexterity_exp_mult\":1.1333311,\"agility_exp_mult\":1.1333311,\"charisma_exp_mult\":1.1333311,\"company_rep_mult\":1.030301,\"faction_rep_mult\":1.030301,\"money\":473683.3939256588,\"city\":\"Sector-12\",\"location\":\"Joe's Guns\",\"jobs\":{\"Joe's Guns\":\"Employee\"},\"companyName\":\"Joe's Guns\",\"currentServer\":\"iron-gym\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"cores\":2,\"level\":105,\"moneyGainRatePerSecond\":317.1733695298734,\"onlineTimeSeconds\":12015.60000000865,\"ram\":16,\"totalMoneyGenerated\":1393351.6280855355,\"name\":\"hacknet-node-0\"}}],\"hashManager\":{\"ctor\":\"HashManager\",\"data\":{\"capacity\":0,\"hashes\":0,\"upgrades\":{\"Sell for Money\":0,\"Sell for Corporation Funds\":0,\"Reduce Minimum Security\":0,\"Increase Maximum Money\":0,\"Improve Studying\":0,\"Improve Gym Training\":0,\"Exchange for Corporation Research\":0,\"Exchange for Bladeburner Rank\":0,\"Exchange for Bladeburner SP\":0,\"Generate Coding Contract\":0}}},\"factions\":[],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"level\":3,\"name\":\"NeuroFlux Governor\"},{\"level\":1,\"name\":\"Neurotrainer I\"},{\"level\":1,\"name\":\"Synaptic Enhancement Implant\"},{\"level\":1,\"name\":\"Wired Reflexes\"}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.030301,\"crime_success_mult\":1.030301,\"isWorking\":false,\"focus\":true,\"workType\":\"\",\"workCostMult\":3,\"workExpMult\":2,\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":0,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":25,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":900000,\"work_money_mult\":1.030301,\"hacknet_node_money_mult\":1.030301,\"hacknet_node_purchase_cost_mult\":0.9702989999999999,\"hacknet_node_ram_cost_mult\":0.9702989999999999,\"hacknet_node_core_cost_mult\":0.9702989999999999,\"hacknet_node_level_cost_mult\":0.9702989999999999,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"has4SData\":false,\"has4SDataTixApi\":false,\"gang\":null,\"corporation\":null,\"bladeburner\":null,\"bladeburner_max_stamina_mult\":1,\"bladeburner_stamina_gain_mult\":1,\"bladeburner_analysis_mult\":1,\"bladeburner_success_chance_mult\":1,\"sleeves\":[],\"resleeves\":[],\"sleevesFromCovenant\":0,\"bitNodeN\":1,\"lastUpdate\":1639882214439,\"totalPlaytime\":251685800,\"playtimeSinceLastAug\":12205400,\"playtimeSinceLastBitnode\":251685800,\"moneySourceA\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":0,\"codingcontract\":0,\"corporation\":0,\"crime\":0,\"gang\":0,\"hacking\":1961996,\"hacknet\":1393351.6280855355,\"hacknet_expenses\":-2001544.3018530316,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":472683.39392566076,\"work\":1318880.067693511,\"servers\":0,\"other\":-2200000,\"augmentations\":0}},\"moneySourceB\":{\"ctor\":\"MoneySourceTracker\",\"data\":{\"bladeburner\":0,\"casino\":0,\"class\":-458880,\"codingcontract\":0,\"corporation\":0,\"crime\":920150,\"gang\":0,\"hacking\":109430965.6111219,\"hacknet\":260559323.1388255,\"hacknet_expenses\":-222187352.59579656,\"hospitalization\":0,\"infiltration\":0,\"sleeves\":0,\"stock\":0,\"total\":20937245.73744739,\"work\":22874616.327666737,\"servers\":-1009743.8720000001,\"other\":-102600000,\"augmentations\":-46591832.87}},\"scriptProdSinceLastAug\":1956242,\"exploits\":[],\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":null}}","AllServersSave":"{\"home\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"home\",\"httpPortOpen\":false,\"ip\":\"89.7.1.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"hackers-starting-handbook.lit\",\"j0.msg\",\"j1.msg\"],\"organizationName\":\"Home PC\",\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"AutoLink.exe-0.21%-INC\",\"FTPCrack.exe\"],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/control.js control.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let files = [\\\"remote.js\\\", \\\"restarthack.js\\\", \\\"deploy.js\\\", \\\"steal.js\\\", \\\"hack.js\\\"]\\n    var arraylen = files.length\\n    for (var i = 0; i < arraylen; i++) {\\n        if (!ns.fileExists(files[i])) {\\n            await ns.wget(`https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/${files[i]}`, `${files[i]}`)\\n        }\\n    }\\n}\",\"filename\":\"control.js\",\"url\":\"blob:file:///ed134cc3-14e1-4a94-adf7-bf8e64e95002\",\"module\":\"\",\"dependencies\":[{\"filename\":\"control.js\",\"url\":\"blob:file:///ed134cc3-14e1-4a94-adf7-bf8e64e95002\"}],\"ramUsage\":1.7,\"server\":\"home\",\"moduleSequenceNumber\":4211}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"blob:file:///2062502d-0d63-4ea0-af3c-dc81c3d5d7d2\",\"module\":\"\",\"dependencies\":[{\"filename\":\"remote.js\",\"url\":\"blob:file:///2062502d-0d63-4ea0-af3c-dc81c3d5d7d2\"}],\"ramUsage\":2.7,\"server\":\"home\",\"moduleSequenceNumber\":4194}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"blob:file:///6ab5d5e3-6936-4698-8fc0-e5b019df97d2\",\"module\":{},\"dependencies\":[{\"filename\":\"restarthack.js\",\"url\":\"blob:file:///6ab5d5e3-6936-4698-8fc0-e5b019df97d2\"}],\"ramUsage\":2.6,\"server\":\"home\",\"moduleSequenceNumber\":1217}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"blob:file:///e6428307-bed2-4a93-90fc-6e7eb6bc0dd1\",\"module\":\"\",\"dependencies\":[{\"filename\":\"deploy.js\",\"url\":\"blob:file:///e6428307-bed2-4a93-90fc-6e7eb6bc0dd1\"}],\"ramUsage\":2.7,\"server\":\"home\",\"moduleSequenceNumber\":4196}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//https://www.reddit.com/r/Bitburner/comments/rhpp8p/scan_script_updated_for_bitburner_v110/\\n//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/connect.js connect.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let paths = { \\\"home\\\": \\\"\\\" };\\n    let queue = Object.keys(paths);\\n    let name;\\n    let output;\\n    let pathToTarget;\\n    while ((name = queue.shift())) {\\n        let path = paths[name];\\n        let scanRes = ns.scan(name);\\n        for (let newSv of scanRes) {\\n            if (paths[newSv] === undefined) {\\n                queue.push(newSv);\\n                paths[newSv] = `${path},${newSv}`;\\n                if (newSv == target)\\n                    pathToTarget = paths[newSv].substr(1).split(\\\",\\\");\\n                    \\n            }\\n        }\\n    }\\n    output = \\\"home; \\\";\\n\\n    pathToTarget.forEach(server=> output += \\\" connect \\\" + server + \\\";\\\");\\n\\n    const terminalInput = document.getElementById(\\\"terminal-input\\\");\\n    terminalInput.value=output;\\n    const handler = Object.keys(terminalInput)[1];\\n    terminalInput[handler].onChange({target:terminalInput});\\n    terminalInput[handler].onKeyDown({keyCode:13,preventDefault:()=>null});\\n}\",\"filename\":\"connect.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":26.8,\"server\":\"home\",\"moduleSequenceNumber\":4200}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"home\",\"moduleSequenceNumber\":4171}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"blob:file:///baf133dd-9b36-4c41-9465-21e104ea9dc1\",\"module\":{},\"dependencies\":[{\"filename\":\"hack.js\",\"url\":\"blob:file:///baf133dd-9b36-4c41-9465-21e104ea9dc1\"}],\"ramUsage\":2,\"server\":\"home\",\"moduleSequenceNumber\":17645}},{\"ctor\":\"Script\",\"data\":{\"code\":\"import {\\n    Server,\\n    cmd,\\n    asFormat,\\n    asPercent\\n} from 'helper.js';\\n\\nlet Type = Server.types();\\n\\nlet getColor = type => {\\n    switch (type) {\\n        case Type.Own:\\n            return 'green';\\n        case Type.Faction:\\n            return 'yellow';\\n        case Type.Target:\\n            return 'red';\\n        case Type.Shop:\\n            return 'lightblue';\\n        default:\\n        case Type.MoneyFarm:\\n            return 'white';\\n    }\\n};\\n\\nexport async function main(ns) {\\n\\n    let show = ns.args[0] || 'all';\\n\\n    let output = 'Network:';\\n    Server.get(ns)\\n        .filter(server => {\\n            switch (show) {\\n                default:\\n                case 'all':\\n                    return true;\\n                case 'own':\\n                    return server.type === Server.types().Own;\\n                case 'special':\\n                    return server.type !== Server.types().MoneyFarm;\\n                case 'root':\\n                    return server.hasRoot;\\n                case 'noroot':\\n                    return !server.hasRoot;\\n            }\\n        })\\n        .forEach(server => {\\n            let name = server.name;\\n            let hackColor = server.hasRoot ? 'lime' : 'red';\\n            let nameColor = getColor(server.type);\\n\\n            let moneyCurr = server.moneyAvail;\\n            let moneyMax = server.moneyMax;\\n            let ramMax = ns.getServerRam(name)[0];\\n            let ramUsed = ns.getServerRam(name)[1];\\n            let hoverText = [\\n                `Req level: ${server.levelNeeded}`,\\n                `Req port: ${ns.getServerNumPortsRequired(name)}`,\\n                `Memory: ${asFormat(ramMax)} GB (${asPercent(ramUsed / ramMax)} used)`,\\n                `Security: ${server.securityCurr} / ${server.securityMin}`,\\n                `Money: ${asFormat(moneyCurr)} (${asPercent(moneyCurr / moneyMax)})`,\\n            ].join('\\\\n');\\n\\n            output += ['<br>', ' '.repeat(server.depth),\\n                `<span style='color:${hackColor}'>■ </span>`,\\n                `<a class='scan-analyze-link' title='${hoverText}'' style='color:${nameColor}'>${name}</a> `,\\n            ].join('');\\n        });\\n    ns.tprint(output);\\n    cmd(ns, 'scan-analyze 0');\\n}\",\"filename\":\"scan.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":4.9,\"server\":\"home\",\"moduleSequenceNumber\":4206}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/distribution.js distribution.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    let files = [\\\"remote.js\\\", \\\"restarthack.js\\\", \\\"deploy.js\\\", \\\"steal.js\\\", \\\"hack.js\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        await ns.scp(files, \\\"home\\\", targets[i])\\n    }\\n}\",\"filename\":\"distribution.js\",\"url\":\"blob:file:///f5d87ae2-d001-4037-8be0-d8a70516f47f\",\"module\":{},\"dependencies\":[{\"filename\":\"distribution.js\",\"url\":\"blob:file:///f5d87ae2-d001-4037-8be0-d8a70516f47f\"}],\"ramUsage\":2.2,\"server\":\"home\",\"moduleSequenceNumber\":4353}}],\"serversOnNetwork\":[\"n00dles\",\"foodnstuff\",\"sigma-cosmetics\",\"joesguns\",\"hong-fang-tea\",\"harakiri-sushi\",\"iron-gym\",\"darkweb\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":true,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":1,\"requiredHackingSkill\":1,\"serverGrowth\":1}},\"ecorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"ecorp\",\"httpPortOpen\":false,\"ip\":\"59.3.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"ECorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":34136065270,\"moneyMax\":853401631750,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1259,\"serverGrowth\":99}},\"megacorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"megacorp\",\"httpPortOpen\":false,\"ip\":\"32.2.6.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"MegaCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":56370529873,\"moneyMax\":1409263246825,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1184,\"serverGrowth\":99}},\"b-and-a\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"b-and-a\",\"httpPortOpen\":false,\"ip\":\"75.0.2.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Bachman & Associates\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":25094277708,\"moneyMax\":627356942700,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1073,\"serverGrowth\":80}},\"blade\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"blade\",\"httpPortOpen\":false,\"ip\":\"89.0.5.4\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Blade Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":93,\"hackDifficulty\":93,\"minDifficulty\":31,\"moneyAvailable\":38381687436,\"moneyMax\":959542185900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":909,\"serverGrowth\":73}},\"nwo\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nwo\",\"httpPortOpen\":false,\"ip\":\"7.7.3.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"NWO\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":28116282768,\"moneyMax\":702907069200,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1210,\"serverGrowth\":89}},\"clarkinc\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"clarkinc\",\"httpPortOpen\":false,\"ip\":\"82.8.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"organizationName\":\"Clarke Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\".\",\"fulcrumassets\",\"The-Cave\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":23868100099,\"moneyMax\":596702502475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1069,\"serverGrowth\":62}},\"omnitek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnitek\",\"httpPortOpen\":false,\"ip\":\"17.1.3.5\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"coded-intelligence.lit\",\"history-of-synthoids.lit\"],\"organizationName\":\"OmniTek Incorporated\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"fulcrumtech\",\"blade\",\"nwo\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":15911098735,\"moneyMax\":397777468375,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1051,\"serverGrowth\":98}},\"4sigma\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"4sigma\",\"httpPortOpen\":false,\"ip\":\"99.3.4.9\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Four Sigma\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"vitalife\",\"powerhouse-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":56,\"hackDifficulty\":56,\"minDifficulty\":19,\"moneyAvailable\":24521210260,\"moneyMax\":613030256500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":923,\"serverGrowth\":83}},\"kuai-gong\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"kuai-gong\",\"httpPortOpen\":false,\"ip\":\"24.2.0.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"KuaiGong International\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"helios\",\"b-and-a\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":97,\"hackDifficulty\":97,\"minDifficulty\":32,\"moneyAvailable\":28194502409,\"moneyMax\":704862560225,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1081,\"serverGrowth\":92}},\"fulcrumtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumtech\",\"httpPortOpen\":false,\"ip\":\"68.9.7.6\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\"omnitek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1470001476,\"moneyMax\":36750036900,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1101,\"serverGrowth\":88}},\"fulcrumassets\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"fulcrumassets\",\"httpPortOpen\":false,\"ip\":\"27.2.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Fulcrum Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":99,\"hackDifficulty\":99,\"minDifficulty\":33,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1312,\"serverGrowth\":1}},\"stormtech\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"stormtech\",\"httpPortOpen\":false,\"ip\":\"89.5.0.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Storm Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"applied-energetics\",\".\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1034696757,\"moneyMax\":25867418925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1035,\"serverGrowth\":81}},\"defcomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"defcomm\",\"httpPortOpen\":false,\"ip\":\"40.3.0.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DefComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"omnia\",\"zb-def\",\"nova-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":896776717,\"moneyMax\":22419417925,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":936,\"serverGrowth\":55}},\"infocomm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"infocomm\",\"httpPortOpen\":false,\"ip\":\"96.5.7.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"InfoComm\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\",\"titan-labs\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":78,\"hackDifficulty\":78,\"minDifficulty\":26,\"moneyAvailable\":646282342,\"moneyMax\":16157058550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":948,\"serverGrowth\":69}},\"helios\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"helios\",\"httpPortOpen\":false,\"ip\":\"41.9.6.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"beyond-man.lit\"],\"organizationName\":\"Helios Labs\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"helios\",\"moduleSequenceNumber\":4799}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"helios\",\"moduleSequenceNumber\":4800}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"helios\",\"moduleSequenceNumber\":4801}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"helios\",\"moduleSequenceNumber\":4802}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"helios\",\"moduleSequenceNumber\":4803}}],\"serversOnNetwork\":[\"run4theh111z\",\"kuai-gong\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":92,\"hackDifficulty\":92,\"minDifficulty\":31,\"moneyAvailable\":633784318,\"moneyMax\":15844607950,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":843,\"serverGrowth\":70}},\"vitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"vitalife\",\"httpPortOpen\":false,\"ip\":\"83.8.0.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"VitaLife\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":4759}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"vitalife\",\"moduleSequenceNumber\":4760}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"vitalife\",\"moduleSequenceNumber\":4761}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"vitalife\",\"moduleSequenceNumber\":4762}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"vitalife\",\"moduleSequenceNumber\":4763}}],\"serversOnNetwork\":[\"applied-energetics\",\"4sigma\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":89,\"hackDifficulty\":89,\"minDifficulty\":30,\"moneyAvailable\":787175219,\"moneyMax\":19679380475,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":795,\"serverGrowth\":77}},\"icarus\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"icarus\",\"httpPortOpen\":false,\"ip\":\"72.9.0.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Icarus Microsystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"icarus\",\"moduleSequenceNumber\":4819}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"icarus\",\"moduleSequenceNumber\":4820}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"icarus\",\"moduleSequenceNumber\":4821}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"icarus\",\"moduleSequenceNumber\":4822}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"icarus\",\"moduleSequenceNumber\":4823}}],\"serversOnNetwork\":[\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":91,\"hackDifficulty\":91,\"minDifficulty\":30,\"moneyAvailable\":924146955,\"moneyMax\":23103673875,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":866,\"serverGrowth\":90}},\"univ-energy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"univ-energy\",\"httpPortOpen\":false,\"ip\":\"38.3.8.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"Universal Energy\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":4719}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"univ-energy\",\"moduleSequenceNumber\":4720}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"univ-energy\",\"moduleSequenceNumber\":4721}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"univ-energy\",\"moduleSequenceNumber\":4722}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"univ-energy\",\"moduleSequenceNumber\":4723}}],\"serversOnNetwork\":[\"deltaone\",\"infocomm\",\"taiyang-digital\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":85,\"hackDifficulty\":85,\"minDifficulty\":28,\"moneyAvailable\":1120441578,\"moneyMax\":28011039450,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":850,\"serverGrowth\":90}},\"titan-labs\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"titan-labs\",\"httpPortOpen\":false,\"ip\":\"15.4.1.7\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"coded-intelligence.lit\"],\"organizationName\":\"Titan Laboratories\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":4769}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"titan-labs\",\"moduleSequenceNumber\":4770}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"titan-labs\",\"moduleSequenceNumber\":4771}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"titan-labs\",\"moduleSequenceNumber\":4772}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"titan-labs\",\"moduleSequenceNumber\":4773}}],\"serversOnNetwork\":[\"infocomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":71,\"hackDifficulty\":71,\"minDifficulty\":24,\"moneyAvailable\":835655900,\"moneyMax\":20891397500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":805,\"serverGrowth\":62}},\"microdyne\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"microdyne\",\"httpPortOpen\":false,\"ip\":\"63.2.0.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"Microdyne Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":4789}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"microdyne\",\"moduleSequenceNumber\":4790}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"microdyne\",\"moduleSequenceNumber\":4791}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"microdyne\",\"moduleSequenceNumber\":4792}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"microdyne\",\"moduleSequenceNumber\":4793}}],\"serversOnNetwork\":[\"zb-def\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":531222229,\"moneyMax\":13280555725,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":825,\"serverGrowth\":84}},\"taiyang-digital\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"taiyang-digital\",\"httpPortOpen\":false,\"ip\":\"79.0.5.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"organizationName\":\"Taiyang Digital\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"univ-energy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":807122132,\"moneyMax\":20178053300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":862,\"serverGrowth\":75}},\"galactic-cyber\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"galactic-cyber\",\"httpPortOpen\":false,\"ip\":\"88.4.8.8\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Galactic Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"millenium-fitness\",\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":62,\"hackDifficulty\":62,\"minDifficulty\":21,\"moneyAvailable\":841279132,\"moneyMax\":21031978300,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":857,\"serverGrowth\":90}},\"aerocorp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aerocorp\",\"httpPortOpen\":false,\"ip\":\"46.3.4.7\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"AeroCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":86,\"hackDifficulty\":86,\"minDifficulty\":29,\"moneyAvailable\":1134788342,\"moneyMax\":28369708550,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":900,\"serverGrowth\":55}},\"omnia\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"omnia\",\"httpPortOpen\":false,\"ip\":\"10.6.3.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"history-of-synthoids.lit\"],\"organizationName\":\"Omnia Cybersystems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"galactic-cyber\",\"defcomm\",\"solaris\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":94,\"hackDifficulty\":94,\"minDifficulty\":31,\"moneyAvailable\":995009661,\"moneyMax\":24875241525,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":921,\"serverGrowth\":67}},\"zb-def\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-def\",\"httpPortOpen\":false,\"ip\":\"35.9.9.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"synthetic-muscles.lit\"],\"organizationName\":\"ZB Defense Industries\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":4739}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"zb-def\",\"moduleSequenceNumber\":4740}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"zb-def\",\"moduleSequenceNumber\":4741}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"zb-def\",\"moduleSequenceNumber\":4742}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"zb-def\",\"moduleSequenceNumber\":4743}}],\"serversOnNetwork\":[\"defcomm\",\"microdyne\",\"applied-energetics\",\"run4theh111z\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":998462709,\"moneyMax\":24961567725,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":804,\"serverGrowth\":70}},\"applied-energetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-131903-Joe'sGuns.cct\",\"type\":\"Minimum Path Sum in a Triangle\",\"data\":[[9],[1,7],[1,6,8],[9,1,3,4],[1,2,6,6,6],[2,6,7,9,1,4],[4,4,5,5,4,7,6],[5,3,5,8,2,9,5,4]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"applied-energetics\",\"httpPortOpen\":false,\"ip\":\"71.9.0.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Applied Energetics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":4699}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":4700}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":4701}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":4702}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"applied-energetics\",\"moduleSequenceNumber\":4703}}],\"serversOnNetwork\":[\"zb-def\",\"fulcrumtech\",\"stormtech\",\"vitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":65,\"hackDifficulty\":65,\"minDifficulty\":22,\"moneyAvailable\":941576576,\"moneyMax\":23539414400,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":826,\"serverGrowth\":75}},\"solaris\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"solaris\",\"httpPortOpen\":false,\"ip\":\"27.6.6.4\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"organizationName\":\"Solaris Space Systems\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"solaris\",\"moduleSequenceNumber\":4779}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"solaris\",\"moduleSequenceNumber\":4780}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"solaris\",\"moduleSequenceNumber\":4781}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"solaris\",\"moduleSequenceNumber\":4782}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"solaris\",\"moduleSequenceNumber\":4783}}],\"serversOnNetwork\":[\"omnia\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":747688578,\"moneyMax\":18692214450,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":789,\"serverGrowth\":80}},\"deltaone\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"deltaone\",\"httpPortOpen\":false,\"ip\":\"32.7.9.5\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"DeltaOne\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":4809}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"deltaone\",\"moduleSequenceNumber\":4810}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"deltaone\",\"moduleSequenceNumber\":4811}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"deltaone\",\"moduleSequenceNumber\":4812}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"deltaone\",\"moduleSequenceNumber\":4813}}],\"serversOnNetwork\":[\"snap-fitness\",\"univ-energy\",\"zeus-med\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1587775860,\"moneyMax\":39694396500,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":856,\"serverGrowth\":64}},\"global-pharm\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"global-pharm\",\"httpPortOpen\":false,\"ip\":\"74.1.3.2\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"A-Green-Tomorrow.lit\"],\"organizationName\":\"Global Pharmaceuticals\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":4689}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"global-pharm\",\"moduleSequenceNumber\":4690}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"global-pharm\",\"moduleSequenceNumber\":4691}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"global-pharm\",\"moduleSequenceNumber\":4692}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"global-pharm\",\"moduleSequenceNumber\":4693}}],\"serversOnNetwork\":[\"aevum-police\",\"unitalife\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":1649725632,\"moneyMax\":41243140800,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":816,\"serverGrowth\":90}},\"nova-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"nova-med\",\"httpPortOpen\":false,\"ip\":\"14.8.8.4\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Nova Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":4729}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"nova-med\",\"moduleSequenceNumber\":4730}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"nova-med\",\"moduleSequenceNumber\":4731}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"nova-med\",\"moduleSequenceNumber\":4732}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"nova-med\",\"moduleSequenceNumber\":4733}}],\"serversOnNetwork\":[\"defcomm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":67,\"hackDifficulty\":67,\"minDifficulty\":22,\"moneyAvailable\":1214410571,\"moneyMax\":30360264275,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":775,\"serverGrowth\":78}},\"zeus-med\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zeus-med\",\"httpPortOpen\":false,\"ip\":\"14.0.4.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Zeus Medical\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":81,\"hackDifficulty\":81,\"minDifficulty\":27,\"moneyAvailable\":1304190703,\"moneyMax\":32604767575,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":803,\"serverGrowth\":75}},\"unitalife\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"unitalife\",\"httpPortOpen\":false,\"ip\":\"89.3.8.3\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[],\"organizationName\":\"UnitaLife Group\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":4709}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"unitalife\",\"moduleSequenceNumber\":4710}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"unitalife\",\"moduleSequenceNumber\":4711}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"unitalife\",\"moduleSequenceNumber\":4712}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"unitalife\",\"moduleSequenceNumber\":4713}}],\"serversOnNetwork\":[\"global-pharm\",\"icarus\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":75,\"hackDifficulty\":75,\"minDifficulty\":25,\"moneyAvailable\":1002513296,\"moneyMax\":25062832400,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":786,\"serverGrowth\":77}},\"lexo-corp\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"lexo-corp\",\"httpPortOpen\":false,\"ip\":\"82.8.1.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"LexoCorp\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":4669}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":4670}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":4671}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":4672}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"lexo-corp\",\"moduleSequenceNumber\":4673}}],\"serversOnNetwork\":[\"syscore\",\"snap-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":79,\"hackDifficulty\":79,\"minDifficulty\":26,\"moneyAvailable\":746221834,\"moneyMax\":18655545850,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":740,\"serverGrowth\":59}},\"rho-construction\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rho-construction\",\"httpPortOpen\":false,\"ip\":\"98.0.4.6\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Rho Construction\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":4599}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"rho-construction\",\"moduleSequenceNumber\":4600}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"rho-construction\",\"moduleSequenceNumber\":4601}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"rho-construction\",\"moduleSequenceNumber\":4602}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"rho-construction\",\"moduleSequenceNumber\":4603}}],\"serversOnNetwork\":[\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":40,\"hackDifficulty\":40,\"minDifficulty\":13,\"moneyAvailable\":683965655,\"moneyMax\":17099141375,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":486,\"serverGrowth\":57}},\"alpha-ent\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"alpha-ent\",\"httpPortOpen\":false,\"ip\":\"14.5.5.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"Alpha Enterprises\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":4649}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":4650}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":4651}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":4652}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"alpha-ent\",\"moduleSequenceNumber\":4653}}],\"serversOnNetwork\":[\"rothman-uni\",\"aerocorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":670435528,\"moneyMax\":16760888200,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":580,\"serverGrowth\":60}},\"aevum-police\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"aevum-police\",\"httpPortOpen\":false,\"ip\":\"10.0.2.8\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Aevum Police Headquarters\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":4619}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"aevum-police\",\"moduleSequenceNumber\":4620}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"aevum-police\",\"moduleSequenceNumber\":4621}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"aevum-police\",\"moduleSequenceNumber\":4622}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"aevum-police\",\"moduleSequenceNumber\":4623}}],\"serversOnNetwork\":[\"syscore\",\"global-pharm\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":76,\"hackDifficulty\":76,\"minDifficulty\":25,\"moneyAvailable\":340658196,\"moneyMax\":8516454900,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":429,\"serverGrowth\":41}},\"rothman-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"rothman-uni\",\"httpPortOpen\":false,\"ip\":\"68.1.1.3\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"organizationName\":\"Rothman University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":4569}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":4570}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":4571}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":4572}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"rothman-uni\",\"moduleSequenceNumber\":4573}}],\"serversOnNetwork\":[\"comptek\",\"alpha-ent\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":225660957,\"moneyMax\":5641523925,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":373,\"serverGrowth\":38}},\"zb-institute\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zb-institute\",\"httpPortOpen\":false,\"ip\":\"93.6.9.6\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[],\"organizationName\":\"ZB Institute of Technology\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":4749}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"zb-institute\",\"moduleSequenceNumber\":4750}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"zb-institute\",\"moduleSequenceNumber\":4751}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"zb-institute\",\"moduleSequenceNumber\":4752}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"zb-institute\",\"moduleSequenceNumber\":4753}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":932765161,\"moneyMax\":23319129025,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":746,\"serverGrowth\":75}},\"summit-uni\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"summit-uni\",\"httpPortOpen\":false,\"ip\":\"29.5.0.1\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"organizationName\":\"Summit University\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":4589}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"summit-uni\",\"moduleSequenceNumber\":4590}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"summit-uni\",\"moduleSequenceNumber\":4591}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"summit-uni\",\"moduleSequenceNumber\":4592}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"summit-uni\",\"moduleSequenceNumber\":4593}}],\"serversOnNetwork\":[\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":260270273,\"moneyMax\":6506756825,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":449,\"serverGrowth\":44}},\"syscore\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"syscore\",\"httpPortOpen\":false,\"ip\":\"80.5.6.2\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"SysCore Securities\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"syscore\",\"moduleSequenceNumber\":4659}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"syscore\",\"moduleSequenceNumber\":4660}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"syscore\",\"moduleSequenceNumber\":4661}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"syscore\",\"moduleSequenceNumber\":4662}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"syscore\",\"moduleSequenceNumber\":4663}}],\"serversOnNetwork\":[\"comptek\",\"lexo-corp\",\"aevum-police\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":70,\"hackDifficulty\":70,\"minDifficulty\":23,\"moneyAvailable\":593962198,\"moneyMax\":14849054950,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":578,\"serverGrowth\":69}},\"catalyst\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"catalyst\",\"httpPortOpen\":false,\"ip\":\"29.0.4.3\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"tensions-in-tech-race.lit\"],\"organizationName\":\"Catalyst Ventures\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":4579}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"catalyst\",\"moduleSequenceNumber\":4580}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"catalyst\",\"moduleSequenceNumber\":4581}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"catalyst\",\"moduleSequenceNumber\":4582}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"catalyst\",\"moduleSequenceNumber\":4583}}],\"serversOnNetwork\":[\"crush-fitness\",\"rho-construction\",\"millenium-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":60,\"hackDifficulty\":60,\"minDifficulty\":20,\"moneyAvailable\":402417234,\"moneyMax\":10060430850,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":420,\"serverGrowth\":42}},\"the-hub\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-815713-Joe'sGuns.cct\",\"type\":\"Spiralize Matrix\",\"data\":[[9,42,11,39,14,14,12,4,1,16,16,21,30,8,44],[18,18,14,11,41,18,18,26,42,33,32,6,15,33,27],[38,30,43,4,27,47,26,46,49,28,43,48,12,16,35],[3,10,17,1,3,21,18,17,1,24,9,17,17,41,22]],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"the-hub\",\"httpPortOpen\":false,\"ip\":\"96.8.2.2\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"The Hub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":4529}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"the-hub\",\"moduleSequenceNumber\":4530}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"the-hub\",\"moduleSequenceNumber\":4531}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"the-hub\",\"moduleSequenceNumber\":4532}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"the-hub\",\"moduleSequenceNumber\":4533}}],\"serversOnNetwork\":[\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":45,\"hackDifficulty\":45,\"minDifficulty\":15,\"moneyAvailable\":153248539,\"moneyMax\":3831213475,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":310,\"serverGrowth\":55}},\"comptek\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"comptek\",\"httpPortOpen\":false,\"ip\":\"21.6.8.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"man-and-machine.lit\"],\"organizationName\":\"CompuTek\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"comptek\",\"moduleSequenceNumber\":4549}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"comptek\",\"moduleSequenceNumber\":4550}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"comptek\",\"moduleSequenceNumber\":4551}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"comptek\",\"moduleSequenceNumber\":4552}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"comptek\",\"moduleSequenceNumber\":4553}}],\"serversOnNetwork\":[\"omega-net\",\"rothman-uni\",\"syscore\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":61,\"hackDifficulty\":61,\"minDifficulty\":20,\"moneyAvailable\":224510149,\"moneyMax\":5612753725,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":373,\"serverGrowth\":52}},\"netlink\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"netlink\",\"httpPortOpen\":false,\"ip\":\"69.2.9.1\",\"isConnectedTo\":false,\"maxRam\":128,\"messages\":[\"simulated-reality.lit\"],\"organizationName\":\"NetLink Technologies\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"netlink\",\"moduleSequenceNumber\":4559}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"netlink\",\"moduleSequenceNumber\":4560}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"netlink\",\"moduleSequenceNumber\":4561}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"netlink\",\"moduleSequenceNumber\":4562}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"netlink\",\"moduleSequenceNumber\":4563}}],\"serversOnNetwork\":[\"neo-net\",\"zb-institute\",\"I.I.I.I\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":73,\"hackDifficulty\":73,\"minDifficulty\":24,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":393,\"serverGrowth\":60}},\"johnson-ortho\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"johnson-ortho\",\"httpPortOpen\":false,\"ip\":\"81.6.7.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Johnson Orthopedics\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":4519}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":4520}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":4521}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":4522}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"johnson-ortho\",\"moduleSequenceNumber\":4523}}],\"serversOnNetwork\":[\"silver-helix\",\"summit-uni\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":48,\"hackDifficulty\":48,\"minDifficulty\":16,\"moneyAvailable\":75972724,\"moneyMax\":1899318100,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":289,\"serverGrowth\":55}},\"n00dles\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"n00dles\",\"httpPortOpen\":false,\"ip\":\"57.3.9.2\",\"isConnectedTo\":false,\"maxRam\":4,\"messages\":[],\"organizationName\":\"Noodle Bar\",\"programs\":[],\"ramUsed\":2.4,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[1063152,174,6,0]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":603.7048788975001,\"onlineMoneyMade\":1063152,\"onlineRunningTime\":5937.0099999967915,\"pid\":224,\"ramUsage\":2.4,\"server\":\"n00dles\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"blob:file:///7b089bec-7f1f-4bb3-be7f-a791ea5f837a\",\"module\":\"\",\"dependencies\":[{\"filename\":\"remote.js\",\"url\":\"blob:file:///7b089bec-7f1f-4bb3-be7f-a791ea5f837a\"}],\"ramUsage\":2.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":4267}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"blob:file:///a45328b2-637a-471f-85dc-a3a67e8a3727\",\"module\":\"\",\"dependencies\":[{\"filename\":\"steal.js\",\"url\":\"blob:file:///a45328b2-637a-471f-85dc-a3a67e8a3727\"}],\"ramUsage\":2.4,\"server\":\"n00dles\",\"moduleSequenceNumber\":4270}},{\"ctor\":\"Script\",\"data\":{\"code\":\"while (true){\\r\\n\\thack(n00dles)\\r\\n}\",\"filename\":\"steal.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":785}},{\"ctor\":\"Script\",\"data\":{\"code\":\"\",\"filename\":\"newfile.script\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":1.6,\"server\":\"n00dles\",\"moduleSequenceNumber\":1314}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"n00dles\",\"moduleSequenceNumber\":4272}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"n00dles\",\"moduleSequenceNumber\":4273}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"n00dles\",\"moduleSequenceNumber\":4274}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":true,\"baseDifficulty\":1,\"hackDifficulty\":1.7660000000000007,\"minDifficulty\":1,\"moneyAvailable\":1720666,\"moneyMax\":1750000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":3000}},\"foodnstuff\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"foodnstuff\",\"httpPortOpen\":false,\"ip\":\"0.9.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"sector-12-crime.lit\"],\"organizationName\":\"FoodNStuff\",\"programs\":[],\"ramUsed\":12,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[117153,19,2,0]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":70.13998592999998,\"onlineMoneyMade\":117153,\"onlineRunningTime\":692.2100000000205,\"pid\":268,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,6]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":38.3999598,\"onlineMoneyMade\":0,\"onlineRunningTime\":692.2100000000205,\"pid\":269,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,0,5]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":31.999966499999996,\"onlineMoneyMade\":0,\"onlineRunningTime\":692.2100000000205,\"pid\":270,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,0,3]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":24.299969849999997,\"onlineMoneyMade\":0,\"onlineRunningTime\":692.2100000000205,\"pid\":271,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{\"nectar-net\":[0,0,0,2]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":19.599973199999997,\"onlineMoneyMade\":0,\"onlineRunningTime\":692.2100000000205,\"pid\":272,\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"blob:file:///6325cd36-1615-437e-a88e-436b8affdffd\",\"module\":{},\"dependencies\":[{\"filename\":\"remote.js\",\"url\":\"blob:file:///6325cd36-1615-437e-a88e-436b8affdffd\"}],\"ramUsage\":2.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":14622}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":4360}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":4361}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"blob:file:///9c832df0-0ed2-4c44-b902-ade86e7f9e8b\",\"module\":{},\"dependencies\":[{\"filename\":\"steal.js\",\"url\":\"blob:file:///9c832df0-0ed2-4c44-b902-ade86e7f9e8b\"}],\"ramUsage\":2.4,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":14627}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"foodnstuff\",\"moduleSequenceNumber\":4363}}],\"serversOnNetwork\":[\"home\",\"zer0\",\"nectar-net\",\"max-hardware\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":9.149999999999988,\"minDifficulty\":3,\"moneyAvailable\":2000000,\"moneyMax\":50000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":1,\"serverGrowth\":5}},\"sigma-cosmetics\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"sigma-cosmetics\",\"httpPortOpen\":false,\"ip\":\"56.9.9.9\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Sigma Cosmetics\",\"programs\":[],\"ramUsed\":12,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[41971,7,1,0]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26.719994640000003,\"onlineMoneyMade\":41971,\"onlineRunningTime\":294.8099999999918,\"pid\":287,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,2]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12.799986599999999,\"onlineMoneyMade\":0,\"onlineRunningTime\":294.8099999999918,\"pid\":288,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,0,2]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12.799986599999999,\"onlineMoneyMade\":0,\"onlineRunningTime\":294.8099999999918,\"pid\":289,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,0,1]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8.09998995,\"onlineMoneyMade\":0,\"onlineRunningTime\":294.8099999999918,\"pid\":290,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":294.8099999999918,\"pid\":291,\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"blob:file:///c0288fe9-6b89-457b-883e-a495fa87f406\",\"module\":{},\"dependencies\":[{\"filename\":\"remote.js\",\"url\":\"blob:file:///c0288fe9-6b89-457b-883e-a495fa87f406\"}],\"ramUsage\":2.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":18154}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":4370}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":4371}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"blob:file:///c7ecc8c6-5ff1-42fd-bdcf-0177e74650e7\",\"module\":{},\"dependencies\":[{\"filename\":\"steal.js\",\"url\":\"blob:file:///c7ecc8c6-5ff1-42fd-bdcf-0177e74650e7\"}],\"ramUsage\":2.4,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":18159}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"sigma-cosmetics\",\"moduleSequenceNumber\":4373}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":10,\"hackDifficulty\":9.29999999999999,\"minDifficulty\":3,\"moneyAvailable\":2300000,\"moneyMax\":57500000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":5,\"serverGrowth\":10}},\"joesguns\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"joesguns\",\"httpPortOpen\":false,\"ip\":\"56.6.2.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Joe's Guns\",\"programs\":[],\"ramUsed\":12,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[41795,7,1,0]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26.719994640000003,\"onlineMoneyMade\":41795,\"onlineRunningTime\":286.4099999999923,\"pid\":293,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,2]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12.799986599999999,\"onlineMoneyMade\":0,\"onlineRunningTime\":286.4099999999923,\"pid\":294,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,0,2]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12.799986599999999,\"onlineMoneyMade\":0,\"onlineRunningTime\":286.4099999999923,\"pid\":295,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,0,1]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8.09998995,\"onlineMoneyMade\":0,\"onlineRunningTime\":286.4099999999923,\"pid\":296,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":286.4099999999923,\"pid\":297,\"ramUsage\":2.4,\"server\":\"joesguns\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"blob:file:///b3217d13-ddb0-40e3-ae1d-41a6bc1e8c88\",\"module\":{},\"dependencies\":[{\"filename\":\"remote.js\",\"url\":\"blob:file:///b3217d13-ddb0-40e3-ae1d-41a6bc1e8c88\"}],\"ramUsage\":2.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":18160}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"joesguns\",\"moduleSequenceNumber\":4380}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"joesguns\",\"moduleSequenceNumber\":4381}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"blob:file:///cc418196-3cbb-484f-89c0-be1cd0851a35\",\"module\":{},\"dependencies\":[{\"filename\":\"steal.js\",\"url\":\"blob:file:///cc418196-3cbb-484f-89c0-be1cd0851a35\"}],\"ramUsage\":2.4,\"server\":\"joesguns\",\"moduleSequenceNumber\":18165}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"joesguns\",\"moduleSequenceNumber\":4383}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":14.599999999999994,\"minDifficulty\":5,\"moneyAvailable\":2500000,\"moneyMax\":62500000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":10,\"serverGrowth\":20}},\"zer0\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"zer0\",\"httpPortOpen\":false,\"ip\":\"91.3.3.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"ZER0 Nightclub\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"zer0\",\"moduleSequenceNumber\":4439}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"zer0\",\"moduleSequenceNumber\":4440}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"zer0\",\"moduleSequenceNumber\":4441}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"zer0\",\"moduleSequenceNumber\":4442}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"zer0\",\"moduleSequenceNumber\":4443}}],\"serversOnNetwork\":[\"foodnstuff\",\"phantasy\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":7500000,\"moneyMax\":187500000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":75,\"serverGrowth\":40}},\"nectar-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"nectar-net\",\"httpPortOpen\":false,\"ip\":\"26.5.2.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Nectar Nightclub Network\",\"programs\":[],\"ramUsed\":12,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[48201,8,1,0]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":30.059993970000004,\"onlineMoneyMade\":48201,\"onlineRunningTime\":307.6099999999911,\"pid\":281,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,2]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12.799986599999999,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.6099999999911,\"pid\":282,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,0,2]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12.799986599999999,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.6099999999911,\"pid\":283,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,0,1]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8.09998995,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.6099999999911,\"pid\":284,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":307.6099999999911,\"pid\":285,\"ramUsage\":2.4,\"server\":\"nectar-net\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"blob:file:///3ca5e05c-a1c1-47af-95db-1425dfdefef1\",\"module\":{},\"dependencies\":[{\"filename\":\"remote.js\",\"url\":\"blob:file:///3ca5e05c-a1c1-47af-95db-1425dfdefef1\"}],\"ramUsage\":2.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":17897}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"nectar-net\",\"moduleSequenceNumber\":4390}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"nectar-net\",\"moduleSequenceNumber\":4391}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"blob:file:///235ed421-dcc8-441f-8d47-56250ec03c7f\",\"module\":{},\"dependencies\":[{\"filename\":\"steal.js\",\"url\":\"blob:file:///235ed421-dcc8-441f-8d47-56250ec03c7f\"}],\"ramUsage\":2.4,\"server\":\"nectar-net\",\"moduleSequenceNumber\":17902}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"nectar-net\",\"moduleSequenceNumber\":4393}}],\"serversOnNetwork\":[\"foodnstuff\",\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":19.9,\"minDifficulty\":7,\"moneyAvailable\":2750000,\"moneyMax\":68750000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":20,\"serverGrowth\":25}},\"neo-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[{\"ctor\":\"CodingContract\",\"data\":{\"tries\":0,\"fn\":\"contract-908667-Joe'sGuns.cct\",\"type\":\"Unique Paths in a Grid I\",\"data\":[10,6],\"reward\":{\"name\":\"Joe's Guns\",\"type\":2}}}],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"neo-net\",\"httpPortOpen\":false,\"ip\":\"13.6.0.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-hidden-world.lit\"],\"organizationName\":\"Neo Nightclub Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":4419}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"neo-net\",\"moduleSequenceNumber\":4420}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"neo-net\",\"moduleSequenceNumber\":4421}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"neo-net\",\"moduleSequenceNumber\":4422}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"neo-net\",\"moduleSequenceNumber\":4423}}],\"serversOnNetwork\":[\"nectar-net\",\"netlink\",\"avmnite-02h\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":25,\"hackDifficulty\":25,\"minDifficulty\":8,\"moneyAvailable\":5000000,\"moneyMax\":125000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":50,\"serverGrowth\":25}},\"silver-helix\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"silver-helix\",\"httpPortOpen\":false,\"ip\":\"4.0.8.8\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"new-triads.lit\"],\"organizationName\":\"Silver Helix\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":4479}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"silver-helix\",\"moduleSequenceNumber\":4480}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"silver-helix\",\"moduleSequenceNumber\":4481}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"silver-helix\",\"moduleSequenceNumber\":4482}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"silver-helix\",\"moduleSequenceNumber\":4483}}],\"serversOnNetwork\":[\"max-hardware\",\"the-hub\",\"johnson-ortho\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":45000000,\"moneyMax\":1125000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":150,\"serverGrowth\":30}},\"hong-fang-tea\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"hong-fang-tea\",\"httpPortOpen\":false,\"ip\":\"80.4.9.3\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"brighter-than-the-sun.lit\"],\"organizationName\":\"HongFang Teahouse\",\"programs\":[],\"ramUsed\":12,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[41311,7,1,0]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":26.719994640000003,\"onlineMoneyMade\":41311,\"onlineRunningTime\":276.80999999999284,\"pid\":299,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,2]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12.799986599999999,\"onlineMoneyMade\":0,\"onlineRunningTime\":276.80999999999284,\"pid\":300,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,0,2]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12.799986599999999,\"onlineMoneyMade\":0,\"onlineRunningTime\":276.80999999999284,\"pid\":301,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,0,1]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8.09998995,\"onlineMoneyMade\":0,\"onlineRunningTime\":276.80999999999284,\"pid\":302,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":276.80999999999284,\"pid\":303,\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"blob:file:///c5a84f82-3414-4976-b9f6-f91a34206fa5\",\"module\":{},\"dependencies\":[{\"filename\":\"remote.js\",\"url\":\"blob:file:///c5a84f82-3414-4976-b9f6-f91a34206fa5\"}],\"ramUsage\":2.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":18166}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":4400}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":4401}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"blob:file:///4f30a6d1-02d9-4633-af67-9406ececa0c5\",\"module\":{},\"dependencies\":[{\"filename\":\"steal.js\",\"url\":\"blob:file:///4f30a6d1-02d9-4633-af67-9406ececa0c5\"}],\"ramUsage\":2.4,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":18171}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"hong-fang-tea\",\"moduleSequenceNumber\":4403}}],\"serversOnNetwork\":[\"home\",\"CSEC\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":3000000,\"moneyMax\":75000000,\"numOpenPortsRequired\":0,\"openPortCount\":2,\"requiredHackingSkill\":30,\"serverGrowth\":20}},\"harakiri-sushi\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"harakiri-sushi\",\"httpPortOpen\":false,\"ip\":\"53.1.0.4\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"HaraKiri Sushi Bar Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":4409}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":4410}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":4411}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":4412}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"harakiri-sushi\",\"moduleSequenceNumber\":4413}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":4000000,\"moneyMax\":100000000,\"numOpenPortsRequired\":0,\"openPortCount\":0,\"requiredHackingSkill\":40,\"serverGrowth\":40}},\"phantasy\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"phantasy\",\"httpPortOpen\":false,\"ip\":\"16.8.5.7\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Phantasy Club\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":4469}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"phantasy\",\"moduleSequenceNumber\":4470}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"phantasy\",\"moduleSequenceNumber\":4471}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"phantasy\",\"moduleSequenceNumber\":4472}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"phantasy\",\"moduleSequenceNumber\":4473}}],\"serversOnNetwork\":[\"zer0\",\"crush-fitness\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":20,\"hackDifficulty\":20,\"minDifficulty\":7,\"moneyAvailable\":24000000,\"moneyMax\":600000000,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":100,\"serverGrowth\":35}},\"max-hardware\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"max-hardware\",\"httpPortOpen\":false,\"ip\":\"10.4.0.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Max Hardware Store\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":4449}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"max-hardware\",\"moduleSequenceNumber\":4450}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"max-hardware\",\"moduleSequenceNumber\":4451}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"max-hardware\",\"moduleSequenceNumber\":4452}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"max-hardware\",\"moduleSequenceNumber\":4453}}],\"serversOnNetwork\":[\"foodnstuff\",\"silver-helix\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":15,\"hackDifficulty\":15,\"minDifficulty\":5,\"moneyAvailable\":10000000,\"moneyMax\":250000000,\"numOpenPortsRequired\":1,\"openPortCount\":0,\"requiredHackingSkill\":80,\"serverGrowth\":30}},\"omega-net\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"omega-net\",\"httpPortOpen\":false,\"ip\":\"89.4.7.4\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[\"the-new-god.lit\"],\"organizationName\":\"Omega Software\",\"programs\":[],\"ramUsed\":16.8,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[30499,5,1,0]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":20.03999598,\"onlineMoneyMade\":30499,\"onlineRunningTime\":221.00999999999598,\"pid\":305,\"ramUsage\":2.4,\"server\":\"omega-net\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,2]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":12.799986599999999,\"onlineMoneyMade\":0,\"onlineRunningTime\":221.00999999999598,\"pid\":306,\"ramUsage\":2.4,\"server\":\"omega-net\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{\"sigma-cosmetics\":[0,0,0,1]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6.399993299999999,\"onlineMoneyMade\":0,\"onlineRunningTime\":221.00999999999598,\"pid\":307,\"ramUsage\":2.4,\"server\":\"omega-net\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{\"joesguns\":[0,0,0,1]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":8.09998995,\"onlineMoneyMade\":0,\"onlineRunningTime\":221.00999999999598,\"pid\":308,\"ramUsage\":2.4,\"server\":\"omega-net\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":221.00999999999598,\"pid\":309,\"ramUsage\":2.4,\"server\":\"omega-net\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":221.00999999999598,\"pid\":310,\"ramUsage\":2.4,\"server\":\"omega-net\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":221.00999999999598,\"pid\":311,\"ramUsage\":2.4,\"server\":\"omega-net\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"blob:file:///b7032cd5-f897-4004-a3c6-badc3ed16116\",\"module\":{},\"dependencies\":[{\"filename\":\"remote.js\",\"url\":\"blob:file:///b7032cd5-f897-4004-a3c6-badc3ed16116\"}],\"ramUsage\":2.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":18674}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"omega-net\",\"moduleSequenceNumber\":4490}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"omega-net\",\"moduleSequenceNumber\":4491}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"blob:file:///ddbaf818-a7ed-43e4-9c2e-8b92b0c324e6\",\"module\":{},\"dependencies\":[{\"filename\":\"steal.js\",\"url\":\"blob:file:///ddbaf818-a7ed-43e4-9c2e-8b92b0c324e6\"}],\"ramUsage\":2.4,\"server\":\"omega-net\",\"moduleSequenceNumber\":18686}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"omega-net\",\"moduleSequenceNumber\":4493}}],\"serversOnNetwork\":[\"CSEC\",\"comptek\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":28,\"hackDifficulty\":28,\"minDifficulty\":9,\"moneyAvailable\":62923975,\"moneyMax\":1573099375,\"numOpenPortsRequired\":2,\"openPortCount\":2,\"requiredHackingSkill\":220,\"serverGrowth\":34}},\"crush-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"crush-fitness\",\"httpPortOpen\":false,\"ip\":\"55.1.1.0\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Crush Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":4509}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":4510}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":4511}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":4512}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"crush-fitness\",\"moduleSequenceNumber\":4513}}],\"serversOnNetwork\":[\"phantasy\",\"catalyst\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":36,\"hackDifficulty\":36,\"minDifficulty\":12,\"moneyAvailable\":40400262,\"moneyMax\":1010006550,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":233,\"serverGrowth\":28}},\"iron-gym\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":true,\"hostname\":\"iron-gym\",\"httpPortOpen\":false,\"ip\":\"67.8.6.8\",\"isConnectedTo\":true,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Iron Gym Network\",\"programs\":[],\"ramUsed\":19.2,\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"n00dles\"],\"dataMap\":{\"n00dles\":[7318,1,1,0]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6.67999866,\"onlineMoneyMade\":7318,\"onlineRunningTime\":110.81000000000104,\"pid\":325,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"foodnstuff\"],\"dataMap\":{\"foodnstuff\":[0,0,0,1]},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":6.399993299999999,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.81000000000104,\"pid\":326,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"sigma-cosmetics\"],\"dataMap\":{},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.81000000000104,\"pid\":327,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"joesguns\"],\"dataMap\":{},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.81000000000104,\"pid\":328,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"nectar-net\"],\"dataMap\":{},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.81000000000104,\"pid\":329,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"hong-fang-tea\"],\"dataMap\":{},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.81000000000104,\"pid\":330,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"harakiri-sushi\"],\"dataMap\":{},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.81000000000104,\"pid\":331,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":1}},{\"ctor\":\"RunningScript\",\"data\":{\"args\":[\"iron-gym\"],\"dataMap\":{},\"filename\":\"steal.js\",\"logs\":[],\"logUpd\":true,\"offlineExpGained\":0,\"offlineMoneyMade\":0,\"offlineRunningTime\":0.01,\"onlineExpGained\":0,\"onlineMoneyMade\":0,\"onlineRunningTime\":110.81000000000104,\"pid\":336,\"ramUsage\":2.4,\"server\":\"iron-gym\",\"threads\":1}}],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"blob:file:///353ea4e2-64af-4c65-b577-a0746a245db9\",\"module\":{},\"dependencies\":[{\"filename\":\"remote.js\",\"url\":\"blob:file:///353ea4e2-64af-4c65-b577-a0746a245db9\"}],\"ramUsage\":2.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":19691}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"iron-gym\",\"moduleSequenceNumber\":4460}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"blob:file:///652ac4ab-79a2-40d2-8c79-67dee182d270\",\"module\":{},\"dependencies\":[{\"filename\":\"deploy.js\",\"url\":\"blob:file:///652ac4ab-79a2-40d2-8c79-67dee182d270\"}],\"ramUsage\":2.7,\"server\":\"iron-gym\",\"moduleSequenceNumber\":19704}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"blob:file:///28b0712d-275d-486c-98ab-94c943ebf7ab\",\"module\":{},\"dependencies\":[{\"filename\":\"steal.js\",\"url\":\"blob:file:///28b0712d-275d-486c-98ab-94c943ebf7ab\"}],\"ramUsage\":2.4,\"server\":\"iron-gym\",\"moduleSequenceNumber\":19703}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"iron-gym\",\"moduleSequenceNumber\":4463}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//https://www.reddit.com/r/Bitburner/comments/rhpp8p/scan_script_updated_for_bitburner_v110/\\n//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/connect.js connect.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let target = ns.args[0];\\n    let paths = { \\\"home\\\": \\\"\\\" };\\n    let queue = Object.keys(paths);\\n    let name;\\n    let output;\\n    let pathToTarget;\\n    while ((name = queue.shift())) {\\n        let path = paths[name];\\n        let scanRes = ns.scan(name);\\n        for (let newSv of scanRes) {\\n            if (paths[newSv] === undefined) {\\n                queue.push(newSv);\\n                paths[newSv] = `${path},${newSv}`;\\n                if (newSv == target)\\n                    pathToTarget = paths[newSv].substr(1).split(\\\",\\\");\\n                    \\n            }\\n        }\\n    }\\n    output = \\\"home; \\\";\\n\\n    pathToTarget.forEach(server=> output += \\\" connect \\\" + server + \\\";\\\");\\n\\n    const terminalInput = document.getElementById(\\\"terminal-input\\\");\\n    terminalInput.value=output;\\n    const handler = Object.keys(terminalInput)[1];\\n    terminalInput[handler].onChange({target:terminalInput});\\n    terminalInput[handler].onKeyDown({keyCode:13,preventDefault:()=>null});\\n}\\n\",\"filename\":\"connect.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":26.8,\"server\":\"iron-gym\",\"moduleSequenceNumber\":20208}}],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":30,\"hackDifficulty\":30,\"minDifficulty\":10,\"moneyAvailable\":20000000,\"moneyMax\":500000000,\"numOpenPortsRequired\":1,\"openPortCount\":1,\"requiredHackingSkill\":100,\"serverGrowth\":20}},\"millenium-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"millenium-fitness\",\"httpPortOpen\":false,\"ip\":\"13.5.3.2\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\"Millenium Fitness Network\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":4609}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":4610}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":4611}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":4612}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"millenium-fitness\",\"moduleSequenceNumber\":4613}}],\"serversOnNetwork\":[\"catalyst\",\"galactic-cyber\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":51,\"hackDifficulty\":51,\"minDifficulty\":17,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":486,\"serverGrowth\":39}},\"powerhouse-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"powerhouse-fitness\",\"httpPortOpen\":false,\"ip\":\"44.9.5.6\",\"isConnectedTo\":false,\"maxRam\":32,\"messages\":[],\"organizationName\":\"Powerhouse Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"4sigma\",\"ecorp\",\"megacorp\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":57,\"hackDifficulty\":57,\"minDifficulty\":19,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1000,\"serverGrowth\":50}},\"snap-fitness\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"snap-fitness\",\"httpPortOpen\":false,\"ip\":\"7.4.3.6\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"Snap Fitness\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":4679}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":4680}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":4681}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":4682}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"snap-fitness\",\"moduleSequenceNumber\":4683}}],\"serversOnNetwork\":[\"lexo-corp\",\"deltaone\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":49,\"hackDifficulty\":49,\"minDifficulty\":16,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":731,\"serverGrowth\":41}},\"run4theh111z\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"run4theh111z\",\"httpPortOpen\":false,\"ip\":\"53.0.3.0\",\"isConnectedTo\":false,\"maxRam\":256,\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"organizationName\":\"The Runners\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":4629}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":4630}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":4631}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":4632}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"run4theh111z\",\"moduleSequenceNumber\":4633}}],\"serversOnNetwork\":[\"zb-def\",\"helios\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":527,\"serverGrowth\":0}},\"I.I.I.I\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"I.I.I.I\",\"httpPortOpen\":false,\"ip\":\"19.8.4.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"I.I.I.I\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":4539}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":4540}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":4541}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":4542}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"I.I.I.I\",\"moduleSequenceNumber\":4543}}],\"serversOnNetwork\":[\"netlink\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":3,\"openPortCount\":0,\"requiredHackingSkill\":354,\"serverGrowth\":0}},\"avmnite-02h\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"avmnite-02h\",\"httpPortOpen\":false,\"ip\":\"70.6.6.6\",\"isConnectedTo\":false,\"maxRam\":64,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"NiteSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":4499}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":4500}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":4501}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":4502}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"avmnite-02h\",\"moduleSequenceNumber\":4503}}],\"serversOnNetwork\":[\"neo-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":2,\"openPortCount\":0,\"requiredHackingSkill\":208,\"serverGrowth\":0}},\".\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\".\",\"httpPortOpen\":false,\"ip\":\"33.0.7.0\",\"isConnectedTo\":false,\"maxRam\":16,\"messages\":[],\"organizationName\":\".\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\".\",\"moduleSequenceNumber\":4639}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\".\",\"moduleSequenceNumber\":4640}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\".\",\"moduleSequenceNumber\":4641}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\".\",\"moduleSequenceNumber\":4642}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\".\",\"moduleSequenceNumber\":4643}}],\"serversOnNetwork\":[\"stormtech\",\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":4,\"openPortCount\":0,\"requiredHackingSkill\":519,\"serverGrowth\":0}},\"CSEC\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":true,\"hasAdminRights\":true,\"hostname\":\"CSEC\",\"httpPortOpen\":false,\"ip\":\"56.4.8.1\",\"isConnectedTo\":false,\"maxRam\":8,\"messages\":[\"democracy-is-dead.lit\"],\"organizationName\":\"CyberSec\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js remote.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    //let targets = [\\\"powerhouse-fitness\\\",\\\"fulcrumassets\\\",\\\"Icarus\\\",\\\"kuai-gong\\\",\\\"megacorp\\\",\\\"fulcrumtech\\\",\\\"ecorp\\\",\\\"b-and-a\\\",\\\"blade\\\",\\\"4sigma\\\",\\\"nwo\\\",\\\"omnitek\\\",\\\"clarkeinc\\\",\\\"aerocorp\\\",\\\"stormtech\\\",\\\"taiyang-digital\\\",\\\"infocomm\\\",\\\"galactic-cyber\\\",\\\"defcomm\\\",\\\"omnia\\\",\\\"zeud-med\\\",\\\"icarus\\\",\\\"deltaone\\\",\\\"helios\\\",\\\"microdyne\\\",\\\"solaris\\\",\\\"titan-labs\\\",\\\"vitalife\\\",\\\"zb-institute\\\",\\\"zb-def\\\",\\\"nova-med\\\",\\\"univ-energy\\\",\\\"unitalife\\\",\\\"applied-energetics\\\",\\\"global-pharm\\\",\\\"snap-fitness\\\",\\\"lexo-corp\\\",\\\"syscore\\\",\\\"alpha-ent\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"aevum-police\\\",\\\"millenium-fitness\\\",\\\"rho-construction\\\",\\\"summit-uni\\\",\\\"catalyst\\\",\\\"rothman-uni\\\",\\\"netlink\\\",\\\"comptek\\\",\\\"I.I.I.I\\\",\\\"the-hub\\\",\\\"johnson-ortho\\\",\\\"crush-fitness\\\",\\\"avmnite-02h\\\",\\\"omega-net\\\",\\\"silver-helix\\\",\\\"phantasy\\\",\\\"iron-gym\\\",\\\"max-hardware\\\",\\\"zer0\\\",\\\"CSEC\\\",\\\"neo-net\\\",\\\"harakiri-sushi\\\",\\\"hong-fang-tea\\\",\\\"nectar-net\\\",\\\"joesguns\\\",\\\"sigma-cosmetics\\\",\\\"foodnstuff\\\",\\\"n00dles\\\"]\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    if (!ns.fileExists(\\\"steal.js\\\")) {\\n        await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js\\\", \\\"steal.js\\\")\\n    }\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"steal.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"remote.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":4429}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/restarthack.js restarthack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"hack.js\\\", 1, targets[i])\\n    }\\n}\\n\",\"filename\":\"restarthack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.6,\"server\":\"CSEC\",\"moduleSequenceNumber\":4430}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/deploy.js deploy.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    let targets = [\\\"n00dles\\\",\\\"foodnstuff\\\",\\\"sigma-cosmetics\\\",\\\"joesguns\\\",\\\"nectar-net\\\",\\\"hong-fang-tea\\\",\\\"harakiri-sushi\\\",\\\"neo-net\\\",\\\"CSEC\\\",\\\"zer0\\\",\\\"max-hardware\\\",\\\"iron-gym\\\",\\\"phantasy\\\",\\\"silver-helix\\\",\\\"omega-net\\\",\\\"avmnite-02h\\\",\\\"crush-fitness\\\",\\\"johnson-ortho\\\",\\\"the-hub\\\",\\\"I.I.I.I\\\",\\\"comptek\\\",\\\"netlink\\\",\\\"rothman-uni\\\",\\\"catalyst\\\",\\\"summit-uni\\\",\\\"rho-construction\\\",\\\"millenium-fitness\\\",\\\"aevum-police\\\",\\\"run4theh111z\\\",\\\".\\\",\\\"alpha-ent\\\",\\\"syscore\\\",\\\"lexo-corp\\\",\\\"snap-fitness\\\",\\\"global-pharm\\\",\\\"applied-energetics\\\",\\\"unitalife\\\",\\\"univ-energy\\\",\\\"nova-med\\\",\\\"zb-def\\\",\\\"zb-institute\\\",\\\"vitalife\\\",\\\"titan-labs\\\",\\\"solaris\\\",\\\"microdyne\\\",\\\"helios\\\",\\\"deltaone\\\",\\\"icarus\\\",\\\"zeud-med\\\",\\\"omnia\\\",\\\"defcomm\\\",\\\"galactic-cyber\\\",\\\"infocomm\\\",\\\"taiyang-digital\\\",\\\"stormtech\\\",\\\"aerocorp\\\",\\\"clarkeinc\\\",\\\"omnitek\\\",\\\"nwo\\\",\\\"4sigma\\\",\\\"blade\\\",\\\"b-and-a\\\",\\\"ecorp\\\",\\\"fulcrumtech\\\",\\\"megacorp\\\",\\\"kuai-gong\\\",\\\"Icarus\\\",\\\"fulcrumassets\\\",\\\"powerhouse-fitness\\\"]\\n    var arraylen = targets.length\\n    for (var i = 0; i < arraylen; i++) {\\n        ns.run(\\\"connect.js\\\", 1, targets[i])\\n        if (!ns.fileExists(\\\"remote.js\\\", targets[i])) {\\n            await ns.wget(\\\"https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/remote.js\\\", \\\"remote.js\\\")\\n        }\\n        ns.run(\\\"remote.js\\\", 1, targets[i])\\n    }\\n}\",\"filename\":\"deploy.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.7,\"server\":\"CSEC\",\"moduleSequenceNumber\":4431}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/steal.js steal.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    var moneyThresh = ns.getServerMaxMoney(target) * 0.75\\n    var securityThresh = ns.getServerMinSecurityLevel(target) + 5\\n    while(true) {\\n        if (ns.getServerSecurityLevel(target) > securityThresh) {\\n            await ns.weaken(target)\\n        } else if (ns.getServerMoneyAvailable(target) < moneyThresh) {\\n            await ns.grow(target)\\n        } else {\\n            await ns.hack(target)\\n        }\\n    }\\n}\\n\",\"filename\":\"steal.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2.4,\"server\":\"CSEC\",\"moduleSequenceNumber\":4432}},{\"ctor\":\"Script\",\"data\":{\"code\":\"//wget https://raw.githubusercontent.com/CEILINGSPYSERVERS/Bitburner/main/hack.js hack.js\\n/** @param {import(\\\".\\\").NS } ns */\\nexport async function main(ns) {\\n    var target = ns.args[0]\\n    if (ns.fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\n        ns.brutessh(target)\\n    }\\n    if (ns.fileExists(\\\"ftpcrack.exe\\\", \\\"home\\\")) {\\n        ns.ftpcrack(target)\\n    }\\n    if (ns.fileExists(\\\"relaysmtp.exe\\\", \\\"home\\\")) {\\n        ns.relaysmtp(target)\\n    }\\n    if (ns.fileExists(\\\"httpworm.exe\\\", \\\"home\\\")) {\\n        ns.httpworm(target)\\n    }\\n    if (ns.fileExists(\\\"sqlinject.exe\\\", \\\"home\\\")) {\\n        ns.sqlinject(target)\\n    }\\n    ns.nuke(target)\\n}\",\"filename\":\"hack.js\",\"url\":\"\",\"module\":\"\",\"dependencies\":[],\"ramUsage\":2,\"server\":\"CSEC\",\"moduleSequenceNumber\":4433}}],\"serversOnNetwork\":[\"hong-fang-tea\",\"omega-net\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":true,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":1,\"openPortCount\":2,\"requiredHackingSkill\":55,\"serverGrowth\":0}},\"The-Cave\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"The-Cave\",\"httpPortOpen\":false,\"ip\":\"96.6.5.1\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[\"alpha-omega.lit\"],\"organizationName\":\"Helios\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"clarkinc\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":925,\"serverGrowth\":0}},\"w0r1d_d43m0n\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"w0r1d_d43m0n\",\"httpPortOpen\":false,\"ip\":\"63.5.4.3\",\"isConnectedTo\":false,\"maxRam\":0,\"messages\":[],\"organizationName\":\"w0r1d_d43m0n\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":0,\"hackDifficulty\":0,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":3000,\"serverGrowth\":0}},\"darkweb\":{\"ctor\":\"Server\",\"data\":{\"contracts\":[],\"cpuCores\":1,\"ftpPortOpen\":false,\"hasAdminRights\":false,\"hostname\":\"darkweb\",\"httpPortOpen\":false,\"ip\":\"48.8.3.4\",\"isConnectedTo\":false,\"maxRam\":1,\"messages\":[],\"organizationName\":\"\",\"programs\":[],\"ramUsed\":0,\"runningScripts\":[],\"scripts\":[],\"serversOnNetwork\":[\"home\"],\"smtpPortOpen\":false,\"sqlPortOpen\":false,\"sshPortOpen\":false,\"textFiles\":[],\"purchasedByPlayer\":false,\"backdoorInstalled\":false,\"baseDifficulty\":1,\"hackDifficulty\":1,\"minDifficulty\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"numOpenPortsRequired\":5,\"openPortCount\":0,\"requiredHackingSkill\":1,\"serverGrowth\":1}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"ECorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":3,\"salaryMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.6,\"salaryMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NWO\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.75,\"salaryMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"name\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.25,\"salaryMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.5,\"salaryMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"name\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":2.2,\"salaryMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Fulcrum Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Fulcrum Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DefComm\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"name\":\"VitaLife\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.9,\"salaryMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.7,\"salaryMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"name\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":{\"Chief Executive Officer\":true,\"Operations Manager\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.6,\"salaryMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.8,\"salaryMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.75,\"salaryMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"name\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true},\"expMultiplier\":2,\"salaryMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"name\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Chief Financial Officer\":true,\"Chief Executive Officer\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.4,\"salaryMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Business Intern\":true,\"Business Analyst\":true,\"Business Manager\":true,\"Operations Manager\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true},\"expMultiplier\":1.5,\"salaryMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":{\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true,\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"name\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.3,\"salaryMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"name\":\"CompuTek\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"name\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true,\"Network Engineer\":true,\"Network Administrator\":true,\"Security Engineer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"Field Agent\":true,\"Secret Agent\":true,\"Special Operative\":true,\"Police Officer\":true,\"Police Chief\":true,\"Security Guard\":true,\"Security Officer\":true,\"Security Supervisor\":true,\"Head of Security\":true},\"expMultiplier\":1.2,\"salaryMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":38,\"rolloverRep\":0,\"isMegacorp\":false}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"name\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":{\"Employee\":true,\"Part-time Employee\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":850.1082197521781,\"favor\":14,\"rolloverRep\":0,\"isMegacorp\":false}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Omega Software\",\"info\":\"\",\"companyPositions\":{\"Software Engineering Intern\":true,\"Junior Software Engineer\":true,\"Senior Software Engineer\":true,\"Lead Software Developer\":true,\"Head of Software\":true,\"Head of Engineering\":true,\"Vice President of Technology\":true,\"Chief Technology Officer\":true,\"Software Consultant\":true,\"Senior Software Consultant\":true,\"IT Intern\":true,\"IT Analyst\":true,\"IT Manager\":true,\"Systems Administrator\":true},\"expMultiplier\":1.1,\"salaryMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"name\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":{\"Waiter\":true,\"Part-time Waiter\":true},\"expMultiplier\":1,\"salaryMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0,\"isMegacorp\":false}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Illuminati\",\"playerReputation\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Daedalus\",\"playerReputation\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Covenant\",\"playerReputation\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"ECorp\",\"playerReputation\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"MegaCorp\",\"playerReputation\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bachman & Associates\",\"playerReputation\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Blade Industries\",\"playerReputation\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\",\"Hydroflame Left Arm\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NWO\",\"playerReputation\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Clarke Incorporated\",\"playerReputation\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"OmniTek Incorporated\",\"playerReputation\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Four Sigma\",\"playerReputation\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"KuaiGong International\",\"playerReputation\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Fulcrum Secret Technologies\",\"playerReputation\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"BitRunners\",\"playerReputation\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Black Hand\",\"playerReputation\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"NiteSec\",\"playerReputation\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Synaptic Enhancement Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"Neurotrainer I\",\"PCMatrix\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Aevum\",\"playerReputation\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Chongqing\",\"playerReputation\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Ishima\",\"playerReputation\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"New Tokyo\",\"playerReputation\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"favor\":11.6283,\"isBanned\":false,\"isMember\":false,\"name\":\"Sector-12\",\"playerReputation\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Volhaven\",\"playerReputation\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Unstable Circadian Modulator\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Graphene BrachiBlades Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Speakers for the Dead\",\"playerReputation\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Dark Army\",\"playerReputation\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"The Shadow's Simulacrum\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"The Syndicate\",\"playerReputation\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Silhouette\",\"playerReputation\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tetrads\",\"playerReputation\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Slum Snakes\",\"playerReputation\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"favor\":6.4442,\"isBanned\":false,\"isMember\":false,\"name\":\"Netburners\",\"playerReputation\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\",\"Neuroreceptor Management Implant\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Tian Di Hui\",\"playerReputation\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"Cranial Signal Processors - Gen II\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"favor\":14.5032,\"isBanned\":false,\"isMember\":false,\"name\":\"CyberSec\",\"playerReputation\":0}},\"Bladeburners\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"EsperTech Bladeburner Eyewear\",\"EMS-4 Recombination\",\"ORION-MKIV Shoulder\",\"Hyperion Plasma Cannon V1\",\"Hyperion Plasma Cannon V2\",\"GOLEM Serum\",\"Vangelis Virus\",\"Vangelis Virus 3.0\",\"I.N.T.E.R.L.I.N.K.E.D\",\"Blade's Runners\",\"BLADE-51b Tesla Armor\",\"BLADE-51b Tesla Armor: Power Cells Upgrade\",\"BLADE-51b Tesla Armor: Energy Shielding Upgrade\",\"BLADE-51b Tesla Armor: Unibeam Upgrade\",\"BLADE-51b Tesla Armor: Omnibeam Upgrade\",\"BLADE-51b Tesla Armor: IPU Upgrade\",\"The Blade's Simulacrum\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Bladeburners\",\"playerReputation\":0}},\"Church of the Machine God\":{\"ctor\":\"Faction\",\"data\":{\"alreadyInvited\":false,\"augmentations\":[\"Stanek's Gift - Genesis\",\"Stanek's Gift - Awakening\",\"Stanek's Gift - Serenity\"],\"favor\":0,\"isBanned\":false,\"isMember\":false,\"name\":\"Church of the Machine God\",\"playerReputation\":0}}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":false}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":false}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and install the backdoor on our server. <br><br>-CyberSec\",\"recvd\":false}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and install the backdoor on our server. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":false}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{\"lastUpdate\":0,\"Orders\":{},\"storedCycles\":0,\"ticksUntilCycle\":0}","SettingsSave":"{\"ActiveScriptsServerPageSize\":20,\"ActiveScriptsScriptPageSize\":20,\"AutosaveInterval\":30,\"CodeInstructionRunTime\":25,\"DisableASCIIArt\":false,\"DisableHotkeys\":false,\"DisableTextEffects\":false,\"EnableBashHotkeys\":false,\"TimestampsFormat\":\"\",\"Locale\":\"en\",\"MaxLogCapacity\":60,\"MaxPortCapacity\":50,\"MaxTerminalCapacity\":400,\"OwnedAugmentationsOrder\":1,\"PurchaseAugmentationsOrder\":1,\"SaveGameOnFileSave\":true,\"SuppressBuyAugmentationConfirmation\":false,\"SuppressFactionInvites\":false,\"SuppressMessages\":false,\"SuppressTravelConfirmation\":false,\"SuppressBladeburnerPopup\":false,\"SuppressTIXPopup\":false,\"SuppressSavedGameToast\":false,\"MonacoTheme\":\"monokai\",\"MonacoInsertSpaces\":false,\"MonacoFontSize\":20,\"theme\":{\"primarylight\":\"#0f0\",\"primary\":\"#0c0\",\"primarydark\":\"#090\",\"successlight\":\"#0f0\",\"success\":\"#0c0\",\"successdark\":\"#090\",\"errorlight\":\"#f00\",\"error\":\"#c00\",\"errordark\":\"#900\",\"secondarylight\":\"#AAA\",\"secondary\":\"#888\",\"secondarydark\":\"#666\",\"warninglight\":\"#ff0\",\"warning\":\"#cc0\",\"warningdark\":\"#990\",\"infolight\":\"#69f\",\"info\":\"#36c\",\"infodark\":\"#039\",\"welllight\":\"#444\",\"well\":\"#222\",\"white\":\"#fff\",\"black\":\"#0A0A00\",\"hp\":\"#dd3434\",\"money\":\"#ffd700\",\"hack\":\"#adff2f\",\"combat\":\"#faffdf\",\"cha\":\"#a671d1\",\"int\":\"#6495ed\",\"rep\":\"#faffdf\",\"disabled\":\"#66cfbc\",\"backgroundprimary\":\"#141414\",\"backgroundsecondary\":\"#161616\",\"button\":\"#333\"}}","VersionSave":"7","AllGangsSave":"","LastExportBonus":"1639812441902","StaneksGiftSave":"{\"ctor\":\"StaneksGift\",\"data\":{\"storedCycles\":0,\"fragments\":[]}}"}}